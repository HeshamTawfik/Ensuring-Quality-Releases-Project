trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - images/

name: Azure Pipelines
variables:
  python.version: "3.7.6"
  applicationname: 'jc-test2-AppService'
stages:
  - stage: ProvisionIaC
    displayName: Azure Resources Provisioning
    jobs:
    - job: Provision_Azure_IaC
      displayName: Provision Azure IaC
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - task: DownloadSecureFile@1
        name: tfvardef
        displayName: Download terraform.tfvars
        inputs:
          secureFile: 'terraform.tfvars'

      # Needed for Terraform VM deployment
      - task: InstallSSHKey@0
        displayName: Security Access
        inputs:
          knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk='
          sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2FaiMLw02/qcvqrtIoR1C5CGhDE8DNu3LHaNDn7bjhYtlQCd1t4o5kJYkOfUCJTvbXJhmuIKKPBqC/uqFRZJWoatfjp0hVCuO/9pDg6663wW5yX6//9qaJAShgv4QrpXhWfDa+blT2nSb8EZ7POkB8PcqEgK38THeDGpkPKLaUlP8lavdH1GPp/Z/lgqkcdqR9wPNlZ0Uu3VODew7rHEjSiTGpfZF+itn+LZBozHBiwP3tSQ8bUPaqn3w+2zJKMoe9w2Zy46lq0S9JQDG1Xzjs5/Im4D0Kp17ByPYqy4HddsjTo8rawuEekrl8AJiKxqLO37MBx0U7AMgpL0LazWUs5qzVqL1LnuO7uKQvM5f+DhX/P8g5K8dsmN1smUHbndbFoWg5SsajpY/lolBW0Bjnd9XUGNf8haSwXHJol39wOgSY2rQCi6VRqt3tWV8oENJwGeF4udByqSmhVmL9iigG5Ymm4rIRHhbDZDgPys4yO6YvOa8T7zD6im1HxkSn4M= hesham@Hesham-Tawfik'
          sshKeySecureFile: 'id_rsa'
      
      - task: Bash@3
        displayName: Copy terraform.tfvars
        inputs:
          targetType: 'inline'
          script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform
      
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: '0.14.8'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'AZServiceConnection'
          backendAzureRmResourceGroupName: 'tstate'
          backendAzureRmStorageAccountName: 'tstate1147'
          backendAzureRmContainerName: 'tstate'
          backendAzureRmKey: 'terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: |
            -auto-approve
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'

  - stage: Build
    jobs:
      - job: Build
        pool:
          name: Hosted Ubuntu 1604
        steps:
          #- task: InstallSSHKey@0
          #  inputs:
          #  knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk='
          #  sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2FaiMLw02/qcvqrtIoR1C5CGhDE8DNu3LHaNDn7bjhYtlQCd1t4o5kJYkOfUCJTvbXJhmuIKKPBqC/uqFRZJWoatfjp0hVCuO/9pDg6663wW5yX6//9qaJAShgv4QrpXhWfDa+blT2nSb8EZ7POkB8PcqEgK38THeDGpkPKLaUlP8lavdH1GPp/Z/lgqkcdqR9wPNlZ0Uu3VODew7rHEjSiTGpfZF+itn+LZBozHBiwP3tSQ8bUPaqn3w+2zJKMoe9w2Zy46lq0S9JQDG1Xzjs5/Im4D0Kp17ByPYqy4HddsjTo8rawuEekrl8AJiKxqLO37MBx0U7AMgpL0LazWUs5qzVqL1LnuO7uKQvM5f+DhX/P8g5K8dsmN1smUHbndbFoWg5SsajpY/lolBW0Bjnd9XUGNf8haSwXHJol39wOgSY2rQCi6VRqt3tWV8oENJwGeF4udByqSmhVmL9iigG5Ymm4rIRHhbDZDgPys4yO6YvOa8T7zD6im1HxkSn4M= hesham@Hesham-Tawfik'
          #    sshKeySecureFile: "id_rsa"

          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.BuildId)-fakerestapi.zip'

          - task: PublishPipelineArtifact@1
            displayName: "Upload farestapi Package"
            inputs:
              targetPath: $(Build.BuildId)-fakerestapi.zip
              artifactName: drop-fakerestapi

          - task: ArchiveFiles@2
            displayName: "Archive Selenium UI Tests"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.BuildId)/selenium-tests.zip'
              replaceExistingArchive: true
          - upload: $(Build.BuildId)/selenium-tests.zip
            artifact: selenium

  - stage: Wait
  # Delay further execution of a workflow by 5 minutes - to give time to add the VM to Pipeline Environment
  # and confgure the omsagent from Log analytics in the VM too.
    jobs:
      - job: RunsOnServer
        pool: Server
        steps:
        - task: Delay@1
          inputs:
            delayForMinutes: '5'

  - stage: Deployments
    displayName: Deployments
    jobs:
    - deployment: FakeRestAPIDeploy
      pool:
        vmImage: 'Ubuntu-18.04'
      environment: 'WEBAPP-TEST'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: 'AZServiceConnection'
                appType: 'webAppLinux'
                appName: $(applicationname)
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                deploymentMethod: 'auto'

    - deployment: VMDeploy
      displayName: VM Deploy
      environment:
        name:  'VM-TEST'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - task: Bash@3
              displayName: 'Install Dependencies'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                  
                  # sudo apt-get upgrade -y
                  # sudo apt-get install python3-pip -y
                  # sudo apt-get install unzip -y
                  # sudo apt-get install -y chromium-browser
                  # pip3 install selenium
                  
                  # download chrome driver v89
                  FILE=chromedriver_linux64.zip
                  if [ -f "$FILE" ]; then
                    echo "$FILE exists."
                  else
                    wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
                  fi
                  # install chrome driver
                  unzip chromedriver_linux64.zip
                  sudo mv chromedriver /usr/bin/chromedriver
                  sudo chown root:root /usr/bin/chromedriver
                  sudo chmod +x /usr/bin/chromedriver
                  chromium-browser -version
                  chromedriver --version
                  # agent log analytics
                  wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ba2f2875-7939-40f7-8fab-9fdfe5774935 -s rb9iiVdW/SUHbVCH4V83NX16EgaXKTEtX7WfGSxykJ3iCaZ/Tm/FFqigsvOAUajQZM0L5k9vAnyM3lD4Iv61cw==
                  sudo /opt/microsoft/omsagent/bin/service_control restart ba2f2875-7939-40f7-8fab-9fdfe5774935
            - download: current
              displayName: 'Download Selenium'
              artifact: selenium
            - task: Bash@3
              displayName: UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                  sudo mkdir /var/logs
                  python3 uitests.py > ui-logs.log
                  sudo mv ui-logs.log /var/logs
                  
  - stage: IntegrationTests
    displayName: Integration Tests
    jobs:
    - job: PostmanTests
      displayName: Postman Tests
      steps: 
      - task: NodeTool@0
        displayName: Install Node v14.X
        inputs:
          versionSpec: '14.x'
          checkLatest: true
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'npm install newman'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: CmdLine@2
        displayName: Run Regression Tests
        inputs:
          script: 'newman run postman/Regression_Test_Suite.postman_collection.json -e postman/Test_Suite.postman_environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml --suppress-exit-code'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        continueOnError: true
      - task: CmdLine@2
        displayName: Run Data Validation Tests
        inputs:
          script: 'newman run postman/Data_Validation_Test_Suite.postman_collection.json -e postman/Data_Validation_Test_Suite.postman_environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/DataValidationTests.xml --suppress-exit-code'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        continueOnError: true
      - task: CmdLine@2
        inputs:
          script: 'ls -la ./Results/'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: PublishTestResults@2
        displayName: Publish Test Reports
        condition: always()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'

  - stage: JMeterTests
    displayName: JMeter Tests
    jobs:
    - job: JMETERTests
      displayName: Test JMeter
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - bash: |
          sudo apt-get install openjdk-11-jre-headless -y
          java -version
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
          tar xzvf jmeter.tgz
          apache-jmeter-5.4/bin/jmeter --version
          # create log directory
          mkdir -p log/jmeter
          pwd
          ls -la
        displayName: Install JMeter
      - bash: |
          apache-jmeter-5.4/bin/jmeter -n -t jmeter/StressTestSuitev2.jmx \
                                       -l log/jmeter/stress-test-result.csv \
                                       -e -f -o log/jmeter/stress-test-html-report \
                                       -j log/jmeter/jmeter-stress-test.log
        displayName: JMeter stress test
      - bash: |
          apache-jmeter-5.4/bin/jmeter -n -t jmeter/EnduranceTestSuitev2.jmx \
                                       -l log/jmeter/endurance-test-result.csv \
                                       -e -f -o log/jmeter/endurance-test-html-report \
                                       -j log/jmeter/jmeter-endurance-test.log
        displayName: JMeter endurance test
      - task: ArchiveFiles@2
        displayName: Archive JMeter stress test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - task: ArchiveFiles@2
        displayName: Archive JMeter endurance test HTML report
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
          verbose: true
      - bash: |
          rm -rf log/jmeter/stress-test-html-report
          rm -rf log/jmeter/endurance-test-html-report
          cd log/jmeter
          pwd
          ls -la
        displayName: Delete original JMeter test HTML reports
      - task: PublishPipelineArtifact@1
        displayName: Publish JMeter logs
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
          artifactName: 'drop-jmeter-logs'

  - stage: UITests
    displayName: UI Tests - Selenium
    jobs:
    - deployment: VMRunUITests
      displayName: Run UI Tests
      environment:
        name:  'VM-TEST'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              displayName: 'Download Selenium'
              artifact: selenium
            - task: Bash@3
              displayName: Selenium UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                  sudo mkdir -p /var/log/selenium
                  sudo chmod 664 /var/log/selenium
                  
                  sudo python3 -u uitests.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
                  # copy selenium log file to $(System.DefaultWorkingDirectory)/log/selenium/
                  cd $(System.DefaultWorkingDirectory)
                  mkdir -p log/selenium
                  pwd
                  sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
                  ls -la
            - task: PublishPipelineArtifact@1
              displayName: Publish selenium logs
              inputs:
                targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
                artifactName: 'drop-selenium-logs'

  - stage: WaitUserApproval
    displayName: User Approval
    jobs:
      - job: waitForValidation
        displayName: Wait for external validation
        pool: server
        timeoutInMinutes: 90 # job times out in 90 minutes
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 80 # task times out in 80 minutes
          inputs:
            notifyUsers: |
              heshamtawfik-93@outlook.com
            instructions: 'Please validate the end of the Pipeline to destroy the Infraestructure'
            onTimeout: 'resume'
  
  - stage: DestroyIaC
    displayName: Destroy IaC
    jobs:
    - job: Destroy_Azure_IaC
      displayName: Destroy Azure IaC
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - task: DownloadSecureFile@1
        name: tfvardef
        displayName: Download terraform.tfvars
        inputs:
          secureFile: 'terraform.tfvars'

      # Needed for Terraform VM deployment
      - task: InstallSSHKey@0
        displayName: Security Access
        inputs:
          knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk='
          sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2FaiMLw02/qcvqrtIoR1C5CGhDE8DNu3LHaNDn7bjhYtlQCd1t4o5kJYkOfUCJTvbXJhmuIKKPBqC/uqFRZJWoatfjp0hVCuO/9pDg6663wW5yX6//9qaJAShgv4QrpXhWfDa+blT2nSb8EZ7POkB8PcqEgK38THeDGpkPKLaUlP8lavdH1GPp/Z/lgqkcdqR9wPNlZ0Uu3VODew7rHEjSiTGpfZF+itn+LZBozHBiwP3tSQ8bUPaqn3w+2zJKMoe9w2Zy46lq0S9JQDG1Xzjs5/Im4D0Kp17ByPYqy4HddsjTo8rawuEekrl8AJiKxqLO37MBx0U7AMgpL0LazWUs5qzVqL1LnuO7uKQvM5f+DhX/P8g5K8dsmN1smUHbndbFoWg5SsajpY/lolBW0Bjnd9XUGNf8haSwXHJol39wOgSY2rQCi6VRqt3tWV8oENJwGeF4udByqSmhVmL9iigG5Ymm4rIRHhbDZDgPys4yO6YvOa8T7zD6im1HxkSn4M= hesham@Hesham-Tawfik'
          sshKeySecureFile: 'id_rsa'
      
      - task: Bash@3
        displayName: Copy terraform.tfvars
        inputs:
          targetType: 'inline'
          script: cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform
      
      - task: TerraformInstaller@0
        displayName: Install Terraform
        inputs:
          terraformVersion: '0.14.8'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'AZServiceConnection'
          backendAzureRmResourceGroupName: 'tstate'
          backendAzureRmStorageAccountName: 'tstate1147'
          backendAzureRmContainerName: 'tstate'
          backendAzureRmKey: 'terraform.tfstate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      
      - task: TerraformTaskV1@0
        displayName: Terraform Apply
        inputs:
          provider: 'azurerm'
          command: 'destroy'
          commandOptions: |
            -auto-approve
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceNameAzureRM: 'AZServiceConnection'